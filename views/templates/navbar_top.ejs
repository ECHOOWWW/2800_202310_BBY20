<!--include Google Icon library-->
<link
  rel="stylesheet"
  href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@48,400,0,0"
/>

<!-- Top NavBar -->
<div id="top-nav-container">
  <!-- Profile icon -->
  <div>
    <a href="/profile"
      ><img src="/images/icon-profile.png" alt="Profile" id="profile-icon"
    /></a>

    <!--back icon to render in profile page-->
    <a href="/home" style="text-decoration: none">
      <span
        class="material-symbols-outlined"
        id="backbutton"
        style="display: none"
      >
        arrow_back_ios
      </span>
    </a>
  </div>

  <!-- Search Bar -->
  <div class="search-container">
    <form>
      <span id="search-span" onclick="submitSearch()">
        <img
          src="/images/icon-search.png"
          alt="Search"
          class="search-bar-icons"
        />
      </span>
      <input
        id="nav-search-bar"
        type="text"
        onkeyup="showResults(this.value)"
        placeholder="Search"
        autofocus
      />
      <span id="filter-span">
        <img
          src="/images/icon-filter.png"
          alt="Search"
          class="search-bar-icons"
          onClick="showFilter()"
        />
      </span>
    </form>
  </div>

  <!-- Tray Icon -->
  <div class="tray-icon-container">
    <img onClick="iconToggle()" id="tray-icon" />
    <!-- <span class="tray-count" id="tray-count">0</span> -->
  </div>
</div>

<!-- Live Search -->
<div class="search-results-container hidden">
  <ul id="search-results">
    <% for (var i=0; i < searchList.length; i++) { %>
    <li class="list-item">
      <a
        href="/item/<%= locals.searchList[i].restaurant %>/<%= locals.searchList[i].item %>"
      >
        <div id="search-results-restaurant">
          <%= locals.searchList[i].restaurant %>
        </div>
        <div style="color: #1f1f1f">
        <div style="color: #1f1f1f">
          <%= locals.searchList[i].item %><br />
          <span style="font-size: 9pt; color: #4b4b4b">
            <%= locals.searchList[i].calories %> Calories
          </span>
        </div>
      </a>
    </li>
    <% } %>
  </ul>
</div>

<!-- Filter card -->
<div class="filter-card-container hidden">
  <form action="/filter" method="get" id="filter-form">
    <label>
      <input type="checkbox" name="filter" value="calorie" />
      Calories < 400
    </label>
    <label>
      <input type="checkbox" name="filter" value="protein" />
      High Protein
    </label>
    <label>
      <input type="checkbox" name="filter" value="fat" />
      Low Fat
    </label>
    <label>
      <input type="checkbox" name="filter" value="carb" />
      Low Carb
    </label>
    <input type="submit" value="Apply Filter" />
  </form>
</div>

<!-- Right Sidebar -->
<div id="right-sidebar-container">
  <div></div>
</div>

<!-- Tray Banner -->
<div id="tray-banner-container" onClick="trayToggle()">
  <div id="tray-contents">
    <div id="food-tray-heading">
      <div>Food Tray</div>
      <div>Calories: xxxx</div>
    </div>
    <div>Contents</div>
  </div>
</div>

<script>
  function showFilter() {
    var filterCard = document.getElementsByClassName("filter-card-container");
    filterCard[0].classList.toggle("hidden");
  }

  const image = document.getElementById("tray-icon");
  const rightSidebar = document.getElementById("right-sidebar-container");
  const foodTray = document.getElementById("tray-banner-container");


  image.src = "/images/icon-tray.png";

  var trayToggleState = false;
  var toggleState = false;
  var images = [
    "/images/icon-tray-opt.gif",
    "/images/icon-tray-reverse-opt.gif",
  ];

  // Function to preload images to improve gif-load performance.
  function preLoadImages() {
    for (i = 0; i < images.length; i++) {
      var imageObject = new Image();
      imageObject.src = images[i];
    }
  }

  // Fetch data from the server to update the right sidebar container
  function updateMyTray() {
  fetch("/mytray")
    .then((response) => response.text())
    .then((data) => {
      const sidebarContainer = document.getElementById("right-sidebar-container");
      sidebarContainer.innerHTML = data;

      const removeButtons = sidebarContainer.querySelectorAll('.remove-btn');

      removeButtons.forEach(button => {
        button.addEventListener('click', (e) => {
          console.log('Remove Button clicked!');
          const itemId = e.target.id;

          fetch('/removeItem', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ itemId: itemId })
          }).then(response => response.json())
            .then(data => {
              if (data.success) {
                updateMyTray();
              } else {
                // Handle error
              }
            });
        });
      });
    })
    .catch((error) => console.error(error));
}

// Toggle the tray icon image and update the tray content
function iconToggle() {
  preLoadImages();
  if (toggleState === false) {
    setTimeout(function () {
      image.src = "/images/icon-tray-opt.gif";
    }, 50);

    updateMyTray();
    
    rightSidebarToggle(toggleState);
  } else {
    setTimeout(function () {
      image.src = "/images/icon-tray-reverse-opt.gif";
    }, 50);
    rightSidebarToggle(toggleState);
  }
  toggleState = !toggleState;
}

  // Toggles the right sidebar between open and closed.
  function rightSidebarToggle(toggleState) {
    if (toggleState === false) {
      rightSidebar.style.transform = "translateX(-350px)";
    } else {
      rightSidebar.style.transform = "translateX(50px)";
    }
  }

  // Closes the right sidebar when the user clicks outside of it.
  document.addEventListener("mousedown", function (e) {
    if (
      !rightSidebar.contains(e.target) &&
      toggleState === true &&
      !image.contains(e.target)
    ) {
      iconToggle();
    }
  });

  // Toggles the food tray between open and closed.
  function trayToggle() {
    if (trayToggleState === false) {
      foodTray.style.transform = "translateY(-200px)";
    } else {
      foodTray.style.transform = "translateY(0px)";
    }
    trayToggleState = !trayToggleState;
  }

  // Closes the food tray when the user clicks outside of it.
  document.addEventListener("mousedown", function (e) {
    if (!foodTray.contains(e.target) && trayToggleState === true) {
    if (!foodTray.contains(e.target) && trayToggleState === true) {
      trayToggle();
    }
  });

  // Displays the search results when the user types in the search bar.
  function showResults(search) {
    console.log(search);
    var searchList = document.getElementsByClassName(
      "search-results-container"
    );
    var listItem = document.getElementsByClassName("list-item");
    for (var i = 0; i < searchList.length; i++) {
      if (search.length < 2) {
        searchList[i].classList.add("hidden");
      } else {
        searchList[i].classList.remove("hidden");
      }
      for (var j = 0; j < listItem.length; j++) {
        if (
          listItem[j].innerHTML
            .toLowerCase()
            .includes(search.toLowerCase().trim())
        ) {
          listItem[j].classList.remove("hidden");
        } else {
          listItem[j].classList.add("hidden");
        }
      }
    }
  }

  document.addEventListener("mousedown", function (e) {
    var searchList = document.getElementsByClassName(
      "search-results-container"
    );
    for (var i = 0; i < searchList.length; i++) {
      if (
        !searchList[i].contains(e.target) &&
        searchList[i].style.display !== "none"
      ) {
        searchList[i].classList.add("hidden");
      }
    }
  });

  function submitSearch() {
    var value = document.getElementById("nav-search-bar").value;
    if (value.toLowerCase() === "mike") {
      window.location.href = "/easteregg";
    } else {
      console.log("Incorrect Key");
    }
  }

  // // Show tray count on page load
  // const trayCountElement = document.getElementById("tray-count");

  // function updateTrayCount(count) {
  //   trayCountElement.textContent = count;
  // }

  // window.onload = function () {
  //   fetch("/trayItemCount")
  //     .then((response) => response.json())
  //     .then((data) => {
  //       updateTrayCount(data.trayItemCount);
  //     });
  // };
</script>
