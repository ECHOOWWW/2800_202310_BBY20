<script>
  $(function () {
    const socket = io();
    const $messages = $("#messages");
    let initialPrompt = "";

    // Handle initial form submission
    $("#initial-form").submit(function (e) {
      e.preventDefault();

      // Get the selected values from the form
      const restaurant = $("#restaurant").val();
      const mealtime = $("#mealtime").val();
      const dietaryRestrictions = $("#dietary-restrictions").val();

      // Generate the initial prompt message
      initialPrompt = `Recommendation for ${mealtime} at ${restaurant}`;
      if (dietaryRestrictions) {
        initialPrompt += ` with dietary restrictions: ${dietaryRestrictions}`;
      }

      // Hide the initial form
      $("#initial-form").hide();
      // Show input field
      $(".input-container").show();
      // Show messages field
      $("#messages").show();

      // Display the initial prompt message
      const $message = $(
        '<div class="conversation-window"><div class="chat-message sent"><p></p></div></div>'
      );
      $message.find("p").text(initialPrompt);
      $messages.append($message);

      // Scrolls to bottom of the chat
      const chatMessages = document.getElementById("messages");
      chatMessages.scrollTop = chatMessages.scrollHeight;

      // Send the initial prompt message to the server
      socket.emit("chat message", initialPrompt);

      // Clear the input fields
      $("#restaurant").val("");
      $("#mealtime").val("");
      $("#dietary-restrictions").val("");
      return false;
    });

    // Handle sending a message
    $("#message-form").submit(function (e) {
      e.preventDefault();

      // Get the message text
      const message = $("#m").val();

      // Add the message to the messages list as a new chat message
      const $message = $(
        '<div class="conversation-window"><div class="chat-message sent"><p></p></div></div>'
      );
      $message.find("p").text(message);
      $messages.append($message);

      // Scrolls to bottom of the chat
      const chatMessages = document.getElementById("messages");
      chatMessages.scrollTop = chatMessages.scrollHeight;

      // Check if the message is unrelated to food
      if (!isFoodRelatedQuestion(message)) {
        // Respond with the predefined message for unrelated questions
        const unrelatedResponse =
          "I'm just a FastFoodie, please ask me something related to Fast Food!";
        const $unrelatedMessage = $(
          '<div class="conversation-window"><div class="chat-message received"><p></p></div></div>'
        );

        setTimeout(() => {
          $unrelatedMessage.find("p").text(unrelatedResponse);
          $messages.append($unrelatedMessage);

          // Scrolls to bottom of the chat
          chatMessages.scrollTop = chatMessages.scrollHeight;
          // Clear the input field
          $("#m").val("");
        }, 1000); // 1 - second delay
        return;
      }

      // Construct the complete prompt by combining the initial prompt and the current message
      const completePrompt = initialPrompt + " " + message;

      // Send the complete prompt to the server
      socket.emit("chat message", completePrompt);

      // Clear the input field
      $("#m").val("");
      return false;
    });

    // Handle receiving a message
    socket.on("chat message", function (msg) {
      const response = msg.split("FastFoodie:")[1];
      // Add the message to the messages list as a new chat message
      const $message = $(
        '<div class="conversation-window"><div class="chat-message received"><p></p></div></div>'
      );
      $message.find("p").text(msg);
      $messages.append($message);

      // Scrolls to bottom of the chat
      const chatMessages = document.getElementById("messages");
      chatMessages.scrollTop = chatMessages.scrollHeight;
    });

    // Check if the message is related to food
    function isFoodRelatedQuestion(message) {
      // Convert the message to lowercase for case-insensitive matching
      const lowercaseMessage = message.toLowerCase();

      // List of food-related keywords or phrases
      const foodKeywords = [
        "food",
        "meal",
        "breakfast",
        "lunch",
        "dinner",
        "restaurant",
        "menu",
        "cuisine",
        "dish",
        "recipe",
        "nutrition",
        "diet",
        "fast food",
        "burger",
        "pizza",
        "fries",
        "sandwich",
        "taco",
        "wrap",
        "salad",
        "soda",
        "soft drink",
        "yogurt",
        "parfait",
        "beverage",
        "calories",
        "carbohydrates",
        "protein",
        "fat",
        "sugar",
        "fiber",
        "cholesterol",
        "sodium",
        "vitamins",
        "minerals",
        "healthy",
        "unhealthy",
        "organic",
        "gluten-free",
        "vegetarian",
        "vegan",
        "allergies",
        "intolerances",
        "weight",
        "portion size",
        "mcdonalds",
        "burger king",
        "subway",
        "taco bell",
        "arbys",
        "kfc",
        "thank",
      ];

      // Check if the message contains any food-related keywords
      return foodKeywords.some((keyword) => lowercaseMessage.includes(keyword));
    }
  });
</script>
