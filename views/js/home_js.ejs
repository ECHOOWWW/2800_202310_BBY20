<script>
  // mainly based on ChatGPT's hint and answer
  // function to update the progress rings
  function updateRings() {
    // pass the variables from the ejs file to the js function
    const calorie_goal = <%= calorie_goal %>;
    const carbs_goal = <%= carbs_goal %>;
    const protein_goal = <%= protein_goal %>;
    const fat_goal = <%= fat_goal %>;
    let calorieProgress, carbsProgress, proteinProgress, fatProgress;

    // fetch the data from the server
    fetch("/trayTotals")
      .then((response) => response.json())
      .then((data) => {
        // update the values in the progress rings
        document.getElementById(
          "division1"
        ).innerHTML = `${data.totalCalories}`;
        document.getElementById("division2").innerHTML = `${data.totalCarbs} `;
        document.getElementById("division3").innerHTML = `${data.totalProtein}`;
        document.getElementById("division4").innerHTML = `${data.totalFat}`;

        // calculate the progress of each ring
        calorieProgress = Math.round((data.totalCalories / calorie_goal) * 100);
        carbsProgress = Math.round((data.totalCarbs / carbs_goal) * 100);
        proteinProgress = Math.round((data.totalProtein / protein_goal) * 100);
        fatProgress = Math.round((data.totalFat / fat_goal) * 100);

        // update the progress rings
        updateChart(
          calorieProgress,
          carbsProgress,
          proteinProgress,
          fatProgress
        );
      });

    // function to update the progress rings
    function updateChart(percent1, percent2, percent3, percent4) {
      const circle1 = document.querySelector(".percent1 circle:nth-of-type(2)");
      const circle2 = document.querySelector(".percent2 circle:nth-of-type(2)");
      const circle3 = document.querySelector(".percent3 circle:nth-of-type(2)");
      const circle4 = document.querySelector(".percent4 circle:nth-of-type(2)");
      const number1 = document.querySelector(".percent1 h2");
      const number2 = document.querySelector(".percent2 h2");
      const number3 = document.querySelector(".percent3 h2");
      const number4 = document.querySelector(".percent4 h2");

      // Get the radius of the circle
      const radius = circle1.r.baseVal.value;
      const circumference = 2 * Math.PI * radius;
      let offset1, offset2, offset3, offset4;

      // Check if the percentage is greater than 100
      if (percent1 > 100) {
        offset1 = 0; // Display the whole ring
      } else {
        offset1 = circumference - (percent1 / 100) * circumference; // Calculate how much of the circle to display
      }

      if (percent2 > 100) {
        offset2 = 0; // Display the whole ring
      } else {
        offset2 = circumference - (percent2 / 100) * circumference;
      }

      if (percent3 > 100) {
        offset3 = 0; // Display the whole ring
      } else {
        offset3 = circumference - (percent3 / 100) * circumference;
      }

      if (percent4 > 100) {
        offset4 = 0; // Display the whole ring
      } else {
        offset4 = circumference - (percent4 / 100) * circumference;
      }

      // Update the stroke dash array and offset for each circle
      circle1.style.strokeDasharray = `${circumference} ${circumference}`;
      circle1.style.strokeDashoffset = offset1;
      circle2.style.strokeDasharray = `${circumference} ${circumference}`;
      circle2.style.strokeDashoffset = offset2;
      circle3.style.strokeDasharray = `${circumference} ${circumference}`;
      circle3.style.strokeDashoffset = offset3;
      circle4.style.strokeDasharray = `${circumference} ${circumference}`;
      circle4.style.strokeDashoffset = offset4;
      // Update the text content for each percentage number
      number1.textContent = `${percent1}%`;
      number2.textContent = `${percent2}%`;
      number3.textContent = `${percent3}%`;
      number4.textContent = `${percent4}%`;
    }
  }
  updateRings();

  // Most code in map.js was generated by New Bing
  // NewBing_Prompt_1

  var userLocation;

  // A global variable to store the names and vicinities of the results
  var resultNamesAndVicinities = [];

  // A function to get the user's location using the Geolocation API
  function getUserLocation() {
    // Check if the browser supports geolocation
    if (navigator.geolocation) {
      // Get the current position of the user
      navigator.geolocation.getCurrentPosition(
        function (position) {
          // Store the user's location as a Google Maps LatLng object
          userLocation = new google.maps.LatLng(
            position.coords.latitude,
            position.coords.longitude
          );
          // Call the function to show the map and the list
          showMapAndList();
        },
        function (error) {
          // Handle errors
          alert("Error getting user location: " + error.message);
        }
      );
    } else {
      // Browser does not support geolocation
      alert("Geolocation is not supported by this browser.");
    }
  }
  // A function to show the map and the list of fast food restaurants near the user's location
  function showMapAndList() {
    // Create a new Google Maps object with some options
    var map = new google.maps.Map(document.getElementById("map"), {
      center: userLocation, // Center the map at the user's location
      zoom: 13, // Set the zoom level
      mapTypeId: google.maps.MapTypeId.ROADMAP, // Set the map type
    });

    // Create a new Google Maps PlacesService object to search for places
    var service = new google.maps.places.PlacesService(map);

    // Define the search parameters
    // Define an array of keywords to search for
    var keywords = [
      "McDonald's",
      "Subway",
      "Burger King",
      "Taco Bell",
      "Dairy Queen",
    ];
    var sortByDistance = [];
    var promises = [];

    // Loop through the keywords array
    for (var i = 0; i < keywords.length; i++) {
      // Get the current keyword
      var keyword = keywords[i];
      // Define the search parameters with the current keyword
      var request = {
        location: userLocation, // Search near the user's location
        radius: 2000, // Search within 3 km
        type: "restaurant", // Search for restaurants
        keyword: keyword, // Search for the current keyword
      };

      // Perform a nearby search using the PlacesService object with the current request
      var promise = new Promise(function (resolve, reject) {
        // Perform a nearby search using the PlacesService object with the current request
        service.nearbySearch(request, function (results, status) {
          if (status == google.maps.places.PlacesServiceStatus.OK) {
            // Loop through the results array
            for (var j = 0; j < results.length; j++) {
              // Get the current result object
              var result = results[j];
              var name = result.name;
              var vicinity = result.vicinity;
              // Get the straight distance between the user's location and the result's location using the geometry library
              var distance =
                Math.round(
                  google.maps.geometry.spherical.computeDistanceBetween(
                    userLocation,
                    result.geometry.location
                  ) / 10
                ) / 100;
              sortByDistance.push({
                name: name,
                vicinity: vicinity,
                distance: distance,
              });
            }
            // Resolve the promise with a success message
            resolve("Search completed");
          } else if (
            status == google.maps.places.PlacesServiceStatus.ZERO_RESULTS
          ) {
            // Resolve the promise with a message indicating no results for the current keyword
            resolve("No results for keyword: " + keyword);
          } else {
            // Reject the promise with an error message
            reject("Search failed");
          }
        });
      });

      // Push the promise to the promises array
      promises.push(promise);
    }

    Promise.all(promises)
      .then(function (messages) {
        // If all promises are resolved, sort and display the sortByDistance array
        sortByDistance.sort(function (a, b) {
          // Convert the distance strings to numbers using parseFloat
          return parseFloat(a.distance) - parseFloat(b.distance);
        });
        // Display the sorted results in the list after all promises are resolved
        for (var k = 0; k < Math.min(sortByDistance.length, 6); k++) {
          var tr = document.createElement("tr");
          tr.innerHTML =
            "<td>&nbsp;" +
            sortByDistance[k].name +
            "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td><td>" +
            sortByDistance[k].distance +
            "KM</td>&nbsp;&nbsp;&nbsp;";

          var link = document.createElement("a");
          link.href =
            "https://www.google.com/maps/search/?api=1&query=" +
            sortByDistance[k].name +
            "+" +
            sortByDistance[k].vicinity; // Use the query parameter with the place name and address
          link.target = "_blank"; // Open the link in a new tab
          link.innerHTML =
            '<span class="material-symbols-outlined">near_me</span>';
          // Append the link element to the list item
          tr.appendChild(link);
          document.getElementById("list").appendChild(tr);
        }
        document.getElementById("loading").style.display = "none";
      })
      .catch(function (error) {
        // If any promise is rejected, log the error message and stop execution
        console.error(error); // Log the error message
        document.getElementById("loading").style.display = "none";
        return; // Stop execution
      });
  }

  // Call the function to get the user's location when the page loads
  getUserLocation();
</script>

<!-- Link to Google Maps JavaScript API -->
<script src="https://maps.googleapis.com/maps/api/js?key=<%= map_api %>&libraries=places,geometry"></script>
